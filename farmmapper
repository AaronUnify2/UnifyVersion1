<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Farm Enterprise Mapper - You Can Farm</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #87CEEB 0%, #98FB98 100%);
            height: 100vh;
            overflow: hidden;
        }

        .toolbar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(0, 0, 0, 0.06);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            z-index: 1000;
            box-shadow: 0 1px 20px rgba(0, 0, 0, 0.03);
        }

        .toolbar-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .toolbar-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2E7D32;
            margin-right: 2rem;
        }

        .toolbar-right {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .toolbar button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 0.75rem 1.25rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(76, 175, 80, 0.2);
            letter-spacing: -0.01em;
        }

        .toolbar button:hover {
            background: #388E3C;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.25);
        }

        .toolbar button.secondary {
            background: #8BC34A;
            color: white;
            box-shadow: 0 1px 3px rgba(139, 195, 74, 0.2);
        }

        .toolbar button.secondary:hover {
            background: #689F38;
            box-shadow: 0 4px 12px rgba(139, 195, 74, 0.25);
        }

        .toolbar button.centerpiece {
            background: #FF6B35;
        }

        .toolbar button.centerpiece:hover {
            background: #E55A2B;
        }

        .toolbar button.complementary {
            background: #4ECDC4;
        }

        .toolbar button.complementary:hover {
            background: #26A69A;
        }

        .toolbar button.waste {
            background: #8D6E63;
        }

        .toolbar button.waste:hover {
            background: #5D4037;
        }

        .add-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .canvas-container {
            position: relative;
            height: calc(100vh - 80px);
            overflow: auto;
            background: rgba(255, 255, 255, 0.1);
        }

        .canvas {
            position: relative;
            min-width: 2000px;
            min-height: 2000px;
            background-image: 
                radial-gradient(circle, rgba(46, 125, 50, 0.1) 1px, transparent 1px);
            background-size: 24px 24px;
        }

        .card {
            position: absolute;
            width: 220px;
            min-height: 120px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 2px solid #4CAF50;
            border-radius: 12px;
            padding: 1rem;
            cursor: move;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.2s ease;
            z-index: 100;
        }

        .card.centerpiece {
            border-color: #FF6B35;
            background: rgba(255, 245, 238, 0.95);
        }

        .card.complementary {
            border-color: #4ECDC4;
            background: rgba(240, 253, 252, 0.95);
        }

        .card.waste {
            border-color: #8D6E63;
            background: rgba(250, 248, 246, 0.95);
        }

        .card:hover {
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            transform: translateY(-2px);
        }

        .card.dragging {
            opacity: 0.95;
            transform: rotate(1deg) scale(1.02);
            z-index: 1000;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .card-number {
            position: absolute;
            top: -10px;
            left: -10px;
            background: #4CAF50;
            color: white;
            width: 26px;
            height: 26px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }

        .card.centerpiece .card-number {
            background: #FF6B35;
        }

        .card.complementary .card-number {
            background: #4ECDC4;
        }

        .card.waste .card-number {
            background: #8D6E63;
        }

        .card-category {
            position: absolute;
            top: -10px;
            right: -10px;
            background: #4CAF50;
            color: white;
            padding: 0.3rem 0.6rem;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .card.centerpiece .card-category {
            background: #FF6B35;
        }

        .card.complementary .card-category {
            background: #4ECDC4;
        }

        .card.waste .card-category {
            background: #8D6E63;
        }

        .card-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.8);
            width: 100%;
            font-size: 1rem;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.2s ease;
            color: #1D1D1F;
        }

        .card-title:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
            background: white;
        }

        .card-season {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 0.5rem;
            font-style: italic;
        }

        .card-controls {
            position: absolute;
            top: -10px;
            right: 50px;
            display: flex;
            gap: 6px;
        }

        .card-btn {
            width: 24px;
            height: 24px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .delete-btn {
            background: #FF3B30;
            color: white;
        }

        .delete-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(255, 59, 48, 0.3);
        }

        .connect-btn {
            background: #34C759;
            color: white;
        }

        .connect-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(52, 199, 89, 0.3);
        }

        .arrow {
            position: absolute;
            pointer-events: none;
            z-index: 50;
        }

        .arrow-line {
            stroke-width: 3;
            fill: none;
            filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.1));
        }

        .card.source-card {
            border: 3px solid #34C759;
            box-shadow: 0 0 0 4px rgba(52, 199, 89, 0.15);
        }

        .card.can-connect {
            border: 3px solid #FF9500;
            box-shadow: 0 0 0 4px rgba(255, 149, 0, 0.15);
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            backdrop-filter: blur(20px);
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 2.5rem;
            border-radius: 16px;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .edit-modal {
            width: 600px;
        }

        .edit-modal h3 {
            color: #2E7D32;
            margin-bottom: 1.5rem;
            font-size: 1.75rem;
            font-weight: 700;
            text-align: center;
            letter-spacing: -0.02em;
        }

        .edit-modal .form-group {
            margin-bottom: 1.5rem;
        }

        .edit-modal label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #2E7D32;
            font-size: 0.95rem;
            letter-spacing: -0.01em;
        }

        .edit-modal input, .edit-modal textarea, .edit-modal select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
            background: rgba(255, 255, 255, 0.8);
            color: #1D1D1F;
        }

        .edit-modal input:focus, .edit-modal textarea:focus, .edit-modal select:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
            background: white;
        }

        .edit-modal textarea {
            height: 90px;
            resize: vertical;
        }

        .edit-modal .button-group {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
        }

        .edit-modal button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.2s ease;
            letter-spacing: -0.01em;
        }

        .edit-modal button:hover {
            background: #388E3C;
            transform: translateY(-1px);
        }

        .edit-modal button.secondary {
            background: #8BC34A;
            color: white;
        }

        .edit-modal button.secondary:hover {
            background: #689F38;
        }

        .arrow-details-btn {
            position: absolute;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
            cursor: pointer;
            z-index: 200;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
            color: #4CAF50;
            letter-spacing: -0.01em;
        }

        .arrow-details-btn:hover {
            background: white;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            border-color: #4CAF50;
            transform: translateY(-1px);
        }

        .collapsible-section {
            margin: 1.5rem 0;
        }

        .collapsible-header {
            background: rgba(248, 249, 250, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.08);
            border-radius: 8px;
            padding: 1rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            margin-bottom: 0.5rem;
            transition: all 0.2s ease;
            color: #2E7D32;
            letter-spacing: -0.01em;
        }

        .collapsible-header:hover {
            background: rgba(229, 229, 234, 0.8);
            transform: translateY(-1px);
        }

        .collapsible-content {
            display: none;
            border: 1px solid rgba(0, 0, 0, 0.08);
            border-radius: 8px;
            padding: 1.5rem;
            background: rgba(248, 249, 250, 0.5);
        }

        .collapsible-content.show {
            display: block;
        }

        .timing-group, .cost-group {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .timing-group input[type="number"], .cost-group input[type="number"] {
            width: 100px;
        }

        .timing-group select, .cost-group select {
            width: 120px;
        }

        .file-input {
            display: none;
        }

        .legend {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .legend h4 {
            color: #2E7D32;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            font-weight: 600;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.3rem 0;
            font-size: 0.8rem;
        }

        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
        }

        @media (max-width: 768px) {
            .toolbar {
                padding: 0.75rem;
                flex-direction: column;
                gap: 0.75rem;
                height: auto;
            }
            
            .toolbar-left {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
                width: 100%;
            }
            
            .toolbar-title {
                font-size: 1.25rem;
                text-align: center;
                margin-right: 0;
                margin-bottom: 0.5rem;
            }
            
            .add-buttons {
                display: flex;
                gap: 0.5rem;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .toolbar-right {
                gap: 0.5rem;
                justify-content: center;
                flex-wrap: wrap;
            }
            
            .toolbar button {
                padding: 0.6rem 1rem;
                font-size: 0.8rem;
                min-width: 100px;
                flex: 1;
                max-width: 200px;
            }
            
            .card {
                width: 200px;
                min-height: 100px;
                padding: 0.8rem;
            }
            
            .canvas-container {
                height: calc(100vh - 160px);
            }
            
            .edit-modal {
                width: 95%;
                padding: 2rem 1.5rem;
            }
            
            .legend {
                position: relative;
                bottom: auto;
                left: auto;
                margin: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="toolbar">
        <div class="toolbar-left">
            <div class="toolbar-title">🚜 Farm Enterprise Mapper</div>
            <div class="add-buttons">
                <button onclick="addCard('centerpiece')" class="centerpiece">Add Centerpiece</button>
                <button onclick="addCard('complementary')" class="complementary">Add Complementary</button>
                <button onclick="addCard('waste')" class="waste">Add Waste Stream</button>
            </div>
        </div>
        <div class="toolbar-right">
            <button onclick="exportProject()" class="secondary">Export JSON</button>
            <button onclick="document.getElementById('importFile').click()" class="secondary">Import JSON</button>
            <button onclick="clearAll()" class="secondary">Clear All</button>
        </div>
        <input type="file" id="importFile" class="file-input" accept=".json" onchange="importProject(event)">
        <span id="modeIndicator"></span>
    </div>

    <div class="canvas-container">
        <div class="canvas" id="canvas">
            <svg style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;">
                <defs>
                    <marker id="arrowhead-blue" markerWidth="10" markerHeight="7" 
                            refX="9" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#4CAF50"/>
                    </marker>
                    <marker id="arrowhead-green" markerWidth="10" markerHeight="7" 
                            refX="9" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#2E7D32"/>
                    </marker>
                </defs>
            </svg>
        </div>
    </div>

    <div class="legend">
        <h4>Enterprise Types</h4>
        <div class="legend-item">
            <div class="legend-color" style="background: #FF6B35;"></div>
            <span>Centerpieces - Main profit drivers</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #4ECDC4;"></div>
            <span>Complementaries - Support main enterprises</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #8D6E63;"></div>
            <span>Waste Streams - Turn waste into profit</span>
        </div>
    </div>

    <div class="modal" id="cardModal">
        <div class="modal-content edit-modal">
            <h3>Edit Farm Enterprise</h3>
            <div class="form-group">
                <label>Enterprise Name:</label>
                <input type="text" id="cardTitle" placeholder="e.g., Pastured Chickens, Market Garden">
            </div>
            <div class="form-group">
                <label>Category:</label>
                <select id="cardCategory">
                    <option value="centerpiece">Centerpiece - Main profit driver</option>
                    <option value="complementary">Complementary - Supports other enterprises</option>
                    <option value="waste">Waste Stream - Turns waste into value</option>
                </select>
            </div>
            <div class="form-group">
                <label>Primary Season:</label>
                <select id="cardSeason">
                    <option value="year-round">Year-round</option>
                    <option value="spring">Spring</option>
                    <option value="summer">Summer</option>
                    <option value="fall">Fall</option>
                    <option value="winter">Winter</option>
                    <option value="spring-summer">Spring & Summer</option>
                    <option value="fall-winter">Fall & Winter</option>
                </select>
            </div>
            <div class="form-group">
                <label>Primary Manager/Operator:</label>
                <input type="text" id="cardManager" placeholder="Who primarily manages this enterprise">
            </div>
            <div class="form-group">
                <label>Supporting Team:</label>
                <input type="text" id="cardTeam" placeholder="Family members, employees, partners">
            </div>
            <div class="form-group">
                <label>Key Resources Needed:</label>
                <textarea id="cardResources" placeholder="Land, equipment, infrastructure, feed, supplies..."></textarea>
            </div>
            <div class="form-group">
                <label>Production Methods:</label>
                <textarea id="cardMethods" placeholder="How this enterprise operates, key practices..."></textarea>
            </div>
            <div class="form-group">
                <label>Success Metrics:</label>
                <textarea id="cardMetrics" placeholder="How do you measure success? Profit, yield, quality indicators..."></textarea>
            </div>
            
            <!-- Farm-specific Planning Fields -->
            <div class="form-group">
                <label>Risk Level:</label>
                <select id="cardRisk">
                    <option value="low">Low - Stable, proven enterprise</option>
                    <option value="medium">Medium - Some market/weather risk</option>
                    <option value="high">High - Significant risk factors</option>
                    <option value="experimental">Experimental - New/testing phase</option>
                </select>
            </div>
            <div class="form-group">
                <label>Quality Standards:</label>
                <textarea id="cardQuality" placeholder="Organic certification, animal welfare standards, customer expectations..."></textarea>
            </div>
            <div class="form-group">
                <label>Estimated Annual Profit:</label>
                <input type="text" id="cardProfit" placeholder="$0 - Expected annual profit">
            </div>
            <div class="form-group">
                <label>Priority Level:</label>
                <select id="cardPriority">
                    <option value="low">Low Priority</option>
                    <option value="medium" selected>Medium Priority</option>
                    <option value="high">High Priority</option>
                    <option value="critical">Critical - Essential to farm</option>
                </select>
            </div>
            
            <div class="button-group">
                <button onclick="closeCardModal()" class="secondary">Cancel</button>
                <button onclick="saveCard()">Save Enterprise</button>
            </div>
        </div>
    </div>

    <div class="modal" id="connectionModal">
        <div class="modal-content edit-modal">
            <h3>Resource Flow Details</h3>
            
            <div class="form-group">
                <label>Resource Type:</label>
                <input type="text" id="resourceType" placeholder="e.g., Manure, Labor, Feed, Equipment, Money">
            </div>

            <div class="form-group">
                <label>Quantity/Amount:</label>
                <input type="text" id="resourceAmount" placeholder="e.g., 2 tons per week, 4 hours daily, $500/month">
            </div>

            <div class="form-group">
                <label>Timing/Schedule:</label>
                <div class="timing-group">
                    <select id="timingFrequency">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="seasonal">Seasonal</option>
                        <option value="annual">Annual</option>
                        <option value="as-needed">As Needed</option>
                    </select>
                    <input type="text" id="timingDetails" placeholder="Specific timing notes">
                </div>
            </div>

            <div class="form-group">
                <label>Processing Required:</label>
                <textarea id="processingRequired" placeholder="How the resource needs to be processed or prepared..."></textarea>
            </div>

            <div class="form-group">
                <label>Quality/Safety Requirements:</label>
                <textarea id="qualityRequirements" placeholder="Standards, testing, safety protocols needed..."></textarea>
            </div>

            <div class="form-group">
                <label>Cost/Value:</label>
                <div class="cost-group">
                    <input type="text" id="costAmount" placeholder="Cost/Value ($)">
                    <select id="costType">
                        <option value="cost">Cost</option>
                        <option value="savings">Savings</option>
                        <option value="revenue">Revenue</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label>Storage/Infrastructure:</label>
                <textarea id="storageNeeds" placeholder="Storage requirements, facilities, equipment needed..."></textarea>
            </div>

            <div class="form-group">
                <label>Coordination Required:</label>
                <textarea id="coordinationNeeded" placeholder="Who needs to coordinate this resource transfer?"></textarea>
            </div>

            <div class="form-group">
                <label>Dependencies:</label>
                <textarea id="dependencies" placeholder="Weather, market conditions, other enterprises..."></textarea>
            </div>

            <div class="button-group">
                <button onclick="closeConnectionModal()" class="secondary">Cancel</button>
                <button onclick="saveConnection()">Save Resource Flow</button>
            </div>
        </div>
    </div>

    <div class="modal" id="modal">
        <div class="modal-content">
            <h3>Farm Plan Data</h3>
            <textarea id="modalContent" rows="20" cols="60" readonly></textarea>
            <br><br>
            <button onclick="closeModal()">Close</button>
        </div>
    </div>

    <script>
        let cardCounter = 0;
        let sourceCard = null;
        let cards = [];
        let connections = [];
        let draggedCard = null;
        let dragOffset = { x: 0, y: 0 };
        let currentEditingCard = null;
        let currentEditingConnection = null;

        function saveToStorage() {
            // Store in localStorage for the current session
            localStorage.setItem('farmMapperData', JSON.stringify({ cards, connections, cardCounter }));
        }
        
        function loadFromStorage() {
            const saved = localStorage.getItem('farmMapperData');
            if (saved) {
                const data = JSON.parse(saved);
                cards = data.cards || [];
                connections = data.connections || [];
                cardCounter = data.cardCounter || 0;
                renderAll();
            }
        }

        function updateCardField(cardId, field, value) {
            const card = cards.find(c => c.id === cardId);
            if (card) {
                card[field] = value;
                console.log(`Updated ${field} for ${cardId}: ${value}`);
                saveToStorage();
            }
        }

        function addCard(category = 'centerpiece') {
            cardCounter++;
            const categoryNames = {
                'centerpiece': 'Centerpiece',
                'complementary': 'Complementary', 
                'waste': 'Waste Stream'
            };
            
            const exampleNames = {
                'centerpiece': 'Main Enterprise',
                'complementary': 'Support Enterprise',
                'waste': 'Waste to Value'
            };

            const card = {
                id: `card-${cardCounter}`,
                title: exampleNames[category],
                category: category,
                season: 'year-round',
                manager: '',
                team: '',
                resources: '',
                methods: '',
                metrics: '',
                risk: 'medium',
                quality: '',
                profit: '',
                priority: 'medium',
                x: 100 + (cardCounter * 50) % 800,
                y: 100 + Math.floor(cardCounter / 16) * 150,
                number: ''
            };
            cards.push(card);
            renderCard(card);
            calculateNumbers();
            saveToStorage();
        }

        function renderCard(card) {
            const cardEl = document.createElement('div');
            cardEl.className = `card ${card.category}`;
            cardEl.id = card.id;
            cardEl.style.left = card.x + 'px';
            cardEl.style.top = card.y + 'px';
            
            const categoryLabels = {
                'centerpiece': 'CENTERPIECE',
                'complementary': 'COMPLEMENTARY',
                'waste': 'WASTE'
            };
            
            cardEl.innerHTML = `
                <div class="card-number">${card.number}</div>
                <div class="card-category">${categoryLabels[card.category]}</div>
                <div class="card-controls">
                    <button class="card-btn connect-btn" onclick="startConnection('${card.id}')" title="Connect">→</button>
                    <button class="card-btn delete-btn" onclick="deleteCard('${card.id}')" title="Delete">×</button>
                </div>
                <input class="card-title" value="${card.title}" 
                       onchange="updateCardField('${card.id}', 'title', this.value)" 
                       placeholder="Enterprise name">
                <div class="card-season">${card.season.charAt(0).toUpperCase() + card.season.slice(1)}</div>
                <div style="margin: 0.5rem 0;">
                    <input value="${card.manager}" 
                           onchange="updateCardField('${card.id}', 'manager', this.value)"
                           placeholder="Primary manager" 
                           style="width: 100%; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 6px; padding: 0.5rem; font-size: 0.8rem; transition: border-color 0.2s ease; background: rgba(255, 255, 255, 0.8); color: #1D1D1F;">
                </div>
                <button onclick="editCard('${card.id}')" 
                        style="width: 100%; background: #4CAF50; color: white; border: none; padding: 0.5rem; border-radius: 6px; font-size: 0.8rem; cursor: pointer; font-weight: 600; transition: all 0.2s ease; letter-spacing: -0.01em;">
                    Edit Details
                </button>
            `;

            // Add drag functionality
            let isDragging = false;
            
            cardEl.addEventListener('mousedown', startDrag);
            cardEl.addEventListener('touchstart', startDrag, { passive: false });

            function startDrag(e) {
                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'INPUT') {
                    return;
                }
                
                e.preventDefault();
                isDragging = true;
                draggedCard = card;
                cardEl.classList.add('dragging');
                
                const rect = cardEl.getBoundingClientRect();
                const clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
                const clientY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;
                
                dragOffset.x = clientX - rect.left;
                dragOffset.y = clientY - rect.top;

                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', stopDrag);
                document.addEventListener('touchmove', drag, { passive: false });
                document.addEventListener('touchend', stopDrag);
            }

            function drag(e) {
                if (!isDragging) return;
                e.preventDefault();
                
                const canvas = document.getElementById('canvas');
                const canvasRect = canvas.getBoundingClientRect();
                const clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
                const clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
                
                const x = clientX - canvasRect.left - dragOffset.x;
                const y = clientY - canvasRect.top - dragOffset.y;
                
                card.x = Math.max(0, x);
                card.y = Math.max(0, y);
                
                cardEl.style.left = card.x + 'px';
                cardEl.style.top = card.y + 'px';
                
                drawConnections();
            }

            function stopDrag() {
                if (isDragging) {
                    isDragging = false;
                    draggedCard = null;
                    cardEl.classList.remove('dragging');
                    saveToStorage();
                }
                
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stopDrag);
                document.removeEventListener('touchmove', drag);
                document.removeEventListener('touchend', stopDrag);
            }

            document.getElementById('canvas').appendChild(cardEl);
            console.log(`Rendered card: ${card.title}`);
        }

        function editCard(cardId) {
            const card = cards.find(c => c.id === cardId);
            if (!card) return;
            
            currentEditingCard = card;
            document.getElementById('cardTitle').value = card.title || '';
            document.getElementById('cardCategory').value = card.category || 'centerpiece';
            document.getElementById('cardSeason').value = card.season || 'year-round';
            document.getElementById('cardManager').value = card.manager || '';
            document.getElementById('cardTeam').value = card.team || '';
            document.getElementById('cardResources').value = card.resources || '';
            document.getElementById('cardMethods').value = card.methods || '';
            document.getElementById('cardMetrics').value = card.metrics || '';
            document.getElementById('cardRisk').value = card.risk || 'medium';
            document.getElementById('cardQuality').value = card.quality || '';
            document.getElementById('cardProfit').value = card.profit || '';
            document.getElementById('cardPriority').value = card.priority || 'medium';
            
            document.getElementById('cardModal').style.display = 'flex';
        }

        function saveCard() {
            if (!currentEditingCard) return;
            
            const oldCategory = currentEditingCard.category;
            
            currentEditingCard.title = document.getElementById('cardTitle').value;
            currentEditingCard.category = document.getElementById('cardCategory').value;
            currentEditingCard.season = document.getElementById('cardSeason').value;
            currentEditingCard.manager = document.getElementById('cardManager').value;
            currentEditingCard.team = document.getElementById('cardTeam').value;
            currentEditingCard.resources = document.getElementById('cardResources').value;
            currentEditingCard.methods = document.getElementById('cardMethods').value;
            currentEditingCard.metrics = document.getElementById('cardMetrics').value;
            currentEditingCard.risk = document.getElementById('cardRisk').value;
            currentEditingCard.quality = document.getElementById('cardQuality').value;
            currentEditingCard.profit = document.getElementById('cardProfit').value;
            currentEditingCard.priority = document.getElementById('cardPriority').value;
            
            // If category changed, re-render the card
            if (oldCategory !== currentEditingCard.category) {
                const cardEl = document.getElementById(currentEditingCard.id);
                if (cardEl) cardEl.remove();
                renderCard(currentEditingCard);
            } else {
                // Update the inline fields
                const cardEl = document.getElementById(currentEditingCard.id);
                if (cardEl) {
                    const titleInput = cardEl.querySelector('.card-title');
                    const managerInput = cardEl.querySelector('input[placeholder="Primary manager"]');
                    const seasonDiv = cardEl.querySelector('.card-season');
                    if (titleInput) titleInput.value = currentEditingCard.title;
                    if (managerInput) managerInput.value = currentEditingCard.manager;
                    if (seasonDiv) seasonDiv.textContent = currentEditingCard.season.charAt(0).toUpperCase() + currentEditingCard.season.slice(1);
                }
            }
            
            closeCardModal();
            saveToStorage();
        }

        function closeCardModal() {
            document.getElementById('cardModal').style.display = 'none';
            currentEditingCard = null;
        }

        function deleteCard(cardId) {
            cards = cards.filter(c => c.id !== cardId);
            connections = connections.filter(c => c.from !== cardId && c.to !== cardId);
            
            const cardEl = document.getElementById(cardId);
            if (cardEl) cardEl.remove();
            
            calculateNumbers();
            drawConnections();
            saveToStorage();
        }

        function startConnection(cardId) {
            if (sourceCard && sourceCard !== cardId) {
                addConnection(sourceCard, cardId);
                sourceCard = null;
                document.querySelectorAll('.card').forEach(c => {
                    c.classList.remove('source-card', 'can-connect');
                });
                document.getElementById('modeIndicator').textContent = '';
            } else {
                document.querySelectorAll('.card').forEach(c => {
                    c.classList.remove('source-card', 'can-connect');
                });
                
                sourceCard = cardId;
                document.getElementById(cardId).classList.add('source-card');
                document.querySelectorAll('.card').forEach(c => {
                    if (c.id !== cardId) c.classList.add('can-connect');
                });
                document.getElementById('modeIndicator').textContent = '🔗 Click arrow on target enterprise to create resource flow';
            }
        }

        function addConnection(fromId, toId) {
            if (!connections.find(c => c.from === fromId && c.to === toId)) {
                connections.push({ 
                    from: fromId, 
                    to: toId, 
                    id: `conn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    // Resource flow fields
                    resourceType: '',
                    resourceAmount: '',
                    timingFrequency: 'weekly',
                    timingDetails: '',
                    processingRequired: '',
                    qualityRequirements: '',
                    costAmount: '',
                    costType: 'cost',
                    storageNeeds: '',
                    coordinationNeeded: '',
                    dependencies: ''
                });
                calculateNumbers();
                drawConnections();
                saveToStorage();
                console.log(`Resource flow added: ${fromId} -> ${toId}`);
            }
        }

        function calculateNumbers() {
            // Reset all numbers
            cards.forEach(card => card.number = '');
            
            // Find starting cards (no incoming connections)
            const startingCards = cards.filter(card => 
                !connections.some(conn => conn.to === card.id)
            );
            
            // If no starting cards, mark all as starting
            if (startingCards.length === 0 && cards.length > 0) {
                startingCards.push(...cards);
            }
            
            // BFS to calculate levels
            const levels = new Map();
            const queue = startingCards.map(card => ({ card, level: 1 }));
            
            startingCards.forEach(card => levels.set(card.id, 1));
            
            while (queue.length > 0) {
                const { card, level } = queue.shift();
                
                // Find cards this card connects to
                const nextCards = connections
                    .filter(conn => conn.from === card.id)
                    .map(conn => cards.find(c => c.id === conn.to))
                    .filter(c => c);
                
                nextCards.forEach(nextCard => {
                    const currentLevel = levels.get(nextCard.id) || 0;
                    const newLevel = Math.max(currentLevel, level + 1);
                    levels.set(nextCard.id, newLevel);
                    queue.push({ card: nextCard, level: newLevel });
                });
            }
            
            // Group by levels and assign letters
            const levelGroups = new Map();
            cards.forEach(card => {
                const level = levels.get(card.id) || 1;
                if (!levelGroups.has(level)) {
                    levelGroups.set(level, []);
                }
                levelGroups.get(level).push(card);
            });
            
            // Assign numbers with letters for same-level cards
            levelGroups.forEach((cardsInLevel, level) => {
                if (cardsInLevel.length === 1) {
                    cardsInLevel[0].number = level.toString();
                } else {
                    cardsInLevel.forEach((card, index) => {
                        const letter = String.fromCharCode(97 + index); // a, b, c...
                        card.number = `${level}${letter}`;
                    });
                }
            });
            
            // Update UI
            cards.forEach(card => {
                const cardEl = document.getElementById(card.id);
                if (cardEl) {
                    const numberEl = cardEl.querySelector('.card-number');
                    if (numberEl) numberEl.textContent = card.number;
                }
            });
        }

        function drawConnections() {
            const svg = document.querySelector('svg');
            const canvas = document.getElementById('canvas');
            
            // Clear existing arrows and details buttons but keep the defs
            const existingLines = svg.querySelectorAll('line');
            const existingBtns = canvas.querySelectorAll('.arrow-details-btn');
            existingLines.forEach(line => line.remove());
            existingBtns.forEach(btn => btn.remove());
            
            connections.forEach(conn => {
                const fromCard = document.getElementById(conn.from);
                const toCard = document.getElementById(conn.to);
                
                if (fromCard && toCard) {
                    const fromRect = fromCard.getBoundingClientRect();
                    const toRect = toCard.getBoundingClientRect();
                    const canvasRect = canvas.getBoundingClientRect();
                    
                    // Calculate center points
                    const fromCenter = {
                        x: fromRect.left - canvasRect.left + fromRect.width / 2,
                        y: fromRect.top - canvasRect.top + fromRect.height / 2
                    };
                    const toCenter = {
                        x: toRect.left - canvasRect.left + toRect.width / 2,
                        y: toRect.top - canvasRect.top + toRect.height / 2
                    };
                    
                    // Calculate edge intersection points
                    const fromEdge = getEdgeIntersection(fromCenter, toCenter, {
                        x: fromRect.left - canvasRect.left,
                        y: fromRect.top - canvasRect.top,
                        width: fromRect.width,
                        height: fromRect.height
                    });
                    
                    const toEdge = getEdgeIntersection(toCenter, fromCenter, {
                        x: toRect.left - canvasRect.left,
                        y: toRect.top - canvasRect.top,
                        width: toRect.width,
                        height: toRect.height
                    });
                    
                    // Draw the arrow line
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    line.setAttribute('x1', fromEdge.x);
                    line.setAttribute('y1', fromEdge.y);
                    line.setAttribute('x2', toEdge.x);
                    line.setAttribute('y2', toEdge.y);
                    line.setAttribute('class', 'arrow-line');
                    line.setAttribute('stroke', '#4CAF50');
                    line.setAttribute('marker-end', 'url(#arrowhead-blue)');
                    
                    svg.appendChild(line);
                    
                    // Add clickable Details button
                    const midX = (fromEdge.x + toEdge.x) / 2;
                    const midY = (fromEdge.y + toEdge.y) / 2;
                    
                    const detailsBtn = document.createElement('div');
                    detailsBtn.className = 'arrow-details-btn';
                    detailsBtn.style.left = (midX - 30) + 'px';
                    detailsBtn.style.top = (midY - 12) + 'px';
                    detailsBtn.textContent = 'Resource';
                    detailsBtn.onclick = () => editConnection(conn.id);
                    
                    canvas.appendChild(detailsBtn);
                }
            });
        }
        
        function getEdgeIntersection(center, target, rect) {
            // Calculate direction vector
            const dx = target.x - center.x;
            const dy = target.y - center.y;
            
            // Calculate intersections with all four edges
            const intersections = [];
            
            // Top edge
            if (dy < 0) {
                const t = -rect.height / 2 / dy;
                const x = center.x + dx * t;
                if (x >= rect.x && x <= rect.x + rect.width) {
                    intersections.push({ x, y: rect.y });
                }
            }
            
            // Bottom edge
            if (dy > 0) {
                const t = rect.height / 2 / dy;
                const x = center.x + dx * t;
                if (x >= rect.x && x <= rect.x + rect.width) {
                    intersections.push({ x, y: rect.y + rect.height });
                }
            }
            
            // Left edge
            if (dx < 0) {
                const t = -rect.width / 2 / dx;
                const y = center.y + dy * t;
                if (y >= rect.y && y <= rect.y + rect.height) {
                    intersections.push({ x: rect.x, y });
                }
            }
            
            // Right edge
            if (dx > 0) {
                const t = rect.width / 2 / dx;
                const y = center.y + dy * t;
                if (y >= rect.y && y <= rect.y + rect.height) {
                    intersections.push({ x: rect.x + rect.width, y });
                }
            }
            
            // Return the closest intersection to the target
            if (intersections.length > 0) {
                return intersections.reduce((closest, current) => {
                    const closestDist = Math.hypot(closest.x - target.x, closest.y - target.y);
                    const currentDist = Math.hypot(current.x - target.x, current.y - target.y);
                    return currentDist < closestDist ? current : closest;
                });
            }
            
            // Fallback to center if no intersection found
            return center;
        }

        function editConnection(connectionId) {
            const connection = connections.find(c => c.id === connectionId);
            if (!connection) return;
            
            currentEditingConnection = connection;
            
            // Populate all fields
            document.getElementById('resourceType').value = connection.resourceType || '';
            document.getElementById('resourceAmount').value = connection.resourceAmount || '';
            document.getElementById('timingFrequency').value = connection.timingFrequency || 'weekly';
            document.getElementById('timingDetails').value = connection.timingDetails || '';
            document.getElementById('processingRequired').value = connection.processingRequired || '';
            document.getElementById('qualityRequirements').value = connection.qualityRequirements || '';
            document.getElementById('costAmount').value = connection.costAmount || '';
            document.getElementById('costType').value = connection.costType || 'cost';
            document.getElementById('storageNeeds').value = connection.storageNeeds || '';
            document.getElementById('coordinationNeeded').value = connection.coordinationNeeded || '';
            document.getElementById('dependencies').value = connection.dependencies || '';
            
            document.getElementById('connectionModal').style.display = 'flex';
        }

        function saveConnection() {
            if (!currentEditingConnection) return;
            
            // Save all field values
            currentEditingConnection.resourceType = document.getElementById('resourceType').value;
            currentEditingConnection.resourceAmount = document.getElementById('resourceAmount').value;
            currentEditingConnection.timingFrequency = document.getElementById('timingFrequency').value;
            currentEditingConnection.timingDetails = document.getElementById('timingDetails').value;
            currentEditingConnection.processingRequired = document.getElementById('processingRequired').value;
            currentEditingConnection.qualityRequirements = document.getElementById('qualityRequirements').value;
            currentEditingConnection.costAmount = document.getElementById('costAmount').value;
            currentEditingConnection.costType = document.getElementById('costType').value;
            currentEditingConnection.storageNeeds = document.getElementById('storageNeeds').value;
            currentEditingConnection.coordinationNeeded = document.getElementById('coordinationNeeded').value;
            currentEditingConnection.dependencies = document.getElementById('dependencies').value;
            
            closeConnectionModal();
            drawConnections();
            saveToStorage();
        }

        function closeConnectionModal() {
            document.getElementById('connectionModal').style.display = 'none';
            currentEditingConnection = null;
        }

        function clearAll() {
            if (confirm('Clear all farm enterprises and resource flows?')) {
                cards = [];
                connections = [];
                cardCounter = 0;
                document.getElementById('canvas').innerHTML = `
                    <svg style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;">
                        <defs>
                            <marker id="arrowhead-blue" markerWidth="10" markerHeight="7" 
                                    refX="9" refY="3.5" orient="auto">
                                <polygon points="0 0, 10 3.5, 0 7" fill="#4CAF50"/>
                            </marker>
                            <marker id="arrowhead-green" markerWidth="10" markerHeight="7" 
                                    refX="9" refY="3.5" orient="auto">
                                <polygon points="0 0, 10 3.5, 0 7" fill="#2E7D32"/>
                            </marker>
                        </defs>
                    </svg>
                `;
                saveToStorage();
            }
        }

        function exportProject() {
            const data = {
                farmName: "My Farm Plan",
                cards,
                connections,
                cardCounter,
                version: '1.0',
                exportDate: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'farm-plan.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importProject(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const data = JSON.parse(e.target.result);
                        cards = data.cards || [];
                        connections = data.connections || [];
                        cardCounter = data.cardCounter || 0;
                        renderAll();
                        saveToStorage();
                    } catch (error) {
                        alert('Error importing file: ' + error.message);
                    }
                };
                reader.readAsText(file);
            }
        }

        function renderAll() {
            document.getElementById('canvas').innerHTML = `
                <svg style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;">
                    <defs>
                        <marker id="arrowhead-blue" markerWidth="10" markerHeight="7" 
                                refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#4CAF50"/>
                        </marker>
                        <marker id="arrowhead-green" markerWidth="10" markerHeight="7" 
                                refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#2E7D32"/>
                        </marker>
                    </defs>
                </svg>
            `;
            
            // Ensure connections have all required fields for compatibility
            connections.forEach(conn => {
                if (!conn.id) {
                    conn.id = `conn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                }
                // Add new fields if they don't exist (backward compatibility)
                if (conn.resourceType === undefined) {
                    conn.resourceType = '';
                    conn.resourceAmount = '';
                    conn.timingFrequency = 'weekly';
                    conn.timingDetails = '';
                    conn.processingRequired = '';
                    conn.qualityRequirements = '';
                    conn.costAmount = '';
                    conn.costType = 'cost';
                    conn.storageNeeds = '';
                    conn.coordinationNeeded = '';
                    conn.dependencies = '';
                }
                // Remove old checkbox fields if they exist
                delete conn.resourceTypeChecked;
                delete conn.resourceAmountChecked;
                delete conn.timingChecked;
                delete conn.processingRequiredChecked;
                delete conn.qualityRequirementsChecked;
                delete conn.costChecked;
                delete conn.storageNeedsChecked;
                delete conn.coordinationNeededChecked;
                delete conn.dependenciesChecked;
            });
            
            // Ensure cards have all fields for backward compatibility
            cards.forEach(card => {
                if (!card.category) card.category = 'centerpiece';
                if (!card.season) card.season = 'year-round';
                if (!card.manager) card.manager = '';
                if (!card.team) card.team = '';
                if (!card.resources) card.resources = '';
                if (!card.methods) card.methods = '';
                if (!card.metrics) card.metrics = '';
                if (!card.risk) card.risk = 'medium';
                if (!card.quality) card.quality = '';
                if (!card.profit) card.profit = '';
                if (!card.priority) card.priority = 'medium';
            });
            
            cards.forEach(renderCard);
            calculateNumbers();
            drawConnections();
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            setTimeout(drawConnections, 100);
        });

        // Close modals when clicking outside or pressing Escape
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                if (e.target.id === 'cardModal') closeCardModal();
                if (e.target.id === 'connectionModal') closeConnectionModal();
                if (e.target.id === 'modal') closeModal();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeCardModal();
                closeConnectionModal();
                closeModal();
            }
        });

        // Initialize
        loadFromStorage();
        
        // Add sample cards to get started
        if (cards.length === 0) {
            // Add a sample centerpiece
            addCard('centerpiece');
            const centerpiece = cards[cards.length - 1];
            centerpiece.title = "Pastured Chickens";
            centerpiece.season = "spring-summer";
            centerpiece.manager = "Farm Manager";
            
            // Add a sample complementary
            addCard('complementary');
            const complementary = cards[cards.length - 1];
            complementary.title = "Market Garden";
            complementary.season = "spring-summer";
            complementary.manager = "Farm Assistant";
            
            // Add a sample waste stream
            addCard('waste');
            const waste = cards[cards.length - 1];
            waste.title = "Compost Operation";
            waste.season = "year-round";
            waste.manager = "Farm Manager";
            
            renderAll();
        }
    </script>
</body>
</html>
